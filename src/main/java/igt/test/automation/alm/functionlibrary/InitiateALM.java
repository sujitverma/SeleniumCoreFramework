
package igt.test.automation.alm.functionlibrary;

import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import igt.test.automation.util.ApiUtil;
import io.restassured.response.Response;

/**
 * Class have function to login ALM and logout from ALM. 
 * @author 
 *
 */
public class InitiateALM {

    /** The Log4j logger. */
    private static final Logger LOG = LogManager.getLogger(InitiateALM.class);

    /**
     * Perform sign in to ALM using <code>username</code>, <code>password</code>.
     * and <code>host</code>.
     * 
     * @param username
     *            - ALM user name used for login
     * @param password
     *            - ALM password used for login
     * @param host
     *            - ALM host url used for login. like
     *            Example://localhost:8080/qcbin
     * @return - {@link ALMCookiesHeaders} Object which contains the Map of
     *         Cookies and Headers and generated by ALM Sign In
     * 
     * @author 
     */
    public ALMCookiesHeaders signInALM(final String username,
            final String password, final String host) {
        ALMCookiesHeaders almCookieHeader = new ALMCookiesHeaders();

        try {
            String encodedCredentials = Base64.getEncoder()
                    .encodeToString((username + ":" + password).getBytes());
            String finalAuthenticateValue = "Basic " + encodedCredentials;
            Map<String, String> headers = new HashMap<>();
            headers.put("Authorization", finalAuthenticateValue);
            String url = host + "/api/authentication/sign-in";
            Response response = ApiUtil.postRequest(url, headers, "");
            Map<String, String> cookiesHeaderMap = response.getCookies();
            almCookieHeader.setCookies(cookiesHeaderMap);

            Map<String, String> newHeaderMap = new HashMap<>();
            newHeaderMap.put("Content-Type", "application/json");
            newHeaderMap.put("Accept", "application/json");
            almCookieHeader.setHeaders(newHeaderMap);
        } catch (Exception e) {
            LOG.error("Exception while sign into ALM :- " + e);
        }
        return almCookieHeader;
    }

    /**
     * Perform sign out from ALM using <code>host</code>,
     * <code>almCookieHeader</code> object.
     * 
     * @param host
     *            - ALM host url used for login. like
     *            Example://localhost:8080/qcbin
     * @param almCookieHeader
     *            - {@link ALMCookiesHeaders} Object which contains the Map of
     *            Cookies and Headers and generated by ALM Sign In
     * 
     * @author 
     * 
     */
    public void signOutALM(final String host,
            final ALMCookiesHeaders almCookieHeader) {
        try {
            String url = host + "/api/authentication/sign-out";
            Response response = ApiUtil.postRequest(url,
                    almCookieHeader.getHeaders(), almCookieHeader.getCookies(),
                    "");
            if (String.valueOf(response.getStatusCode()).contains("200")) {
                LOG.info("ALM Sign out successfully Passed");
            } else {
                LOG.info("Fail. Actual status code is:- "
                        + response.getStatusCode());
            }
        } catch (Exception e) {
            LOG.error("Exception while sign out from ALM :- " + e);
        }
    }
}
