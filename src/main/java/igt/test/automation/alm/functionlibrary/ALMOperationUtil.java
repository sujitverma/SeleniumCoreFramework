
package igt.test.automation.alm.functionlibrary;

import static io.restassured.RestAssured.given;

import java.util.HashMap;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import igt.test.automation.alm.artifacts.CreateTestInstance;
import igt.test.automation.alm.artifacts.CreateTestRun;
import igt.test.automation.alm.artifacts.CreateTestSet;
import igt.test.automation.alm.artifacts.FindTestCase;
import igt.test.automation.alm.artifacts.FindTestSet;
import igt.test.automation.alm.artifacts.TestInstance;
import igt.test.automation.alm.artifacts.UpdateTestInstance;
import igt.test.automation.alm.response.pojo.Entities;
import igt.test.automation.alm.response.pojo.Entity;
import igt.test.automation.alm.response.pojo.Field;
import igt.test.automation.util.ApiUtil;
import io.restassured.response.Response;

/** class to perform ALM operation. */
public class ALMOperationUtil {

    /** The Log4j logger. */
    private static final Logger LOG = LogManager
            .getLogger(ALMOperationUtil.class);

    /** HTTP Status code 200. */
    private static final int HTTPSTATUSCODE_200 = 200;
    
    /** /projects/. */
    private static final String PROJECTS="/projects/";
    
    /** /rest/domains/. */
    private static final String REST_DOMAINS="/rest/domains/";
    
    /** "test-id". */
    private static final String TEST_ID = "test-id";

    /**
     * Perform to create a new Test Set in ALM under given test lab folder name
     * <code> testSetParentFolderId </code>.
     * 
     * @param host
     *            - Its an ALM host url.
     * @param domain
     *            - ALM Domain name.
     * @param project
     *            - ALM Project name.
     * @param cookieHeaderObject
     *            - ALM Cookies and headers.
     * @param testSetParentFolderId
     *            - ALMCookiesHeaders Object which contains the Map of Cookies
     *            and Headers and generated by ALM Sign In.
     * @return {@link Response} Rest Assured rest response in json structure.
     * 
     * @author 
     */
    public Response hitCreateTestSetRequest(final String host,
            final String domain, final String project,
            final ALMCookiesHeaders cookieHeaderObject,
            final String testSetParentFolderId) {
        Response response = null;
        try {
            String requestJson = CreateTestSet
                    .createTestSetRequest(testSetParentFolderId);
            String url = host + REST_DOMAINS + domain + PROJECTS
                    + project + "/test-sets";
            response = ApiUtil.postRequest(url, cookieHeaderObject.getHeaders(),
                    cookieHeaderObject.getCookies(), requestJson);
        } catch (Exception e) {
            LOG.error(e);
        }
        return response;
    }

    /**
     * Function to create new ALM Test Set in Test Lab.
     * 
     * @param almLoginObject
     *            {@link ALMLogin} - Its an ALMLogin java object which store the
     *            basic information of ALM. It contain ALM host, username,
     *            password, domain, project and testlab parent folder id.
     * 
     * @return - {@link TestSet} It contain new ALM test set information i.e.
     *         Test Set Name, Id, Parent id.
     * 
     * @author 
     */
    public TestSet createTestSet(final ALMLogin almLoginObject) {
        String host = almLoginObject.getHost();
        String userName = almLoginObject.getUserName();
        String password = almLoginObject.getPassword();
        String domain = almLoginObject.getDomain();
        String project = almLoginObject.getProject();
        String testSetParentFolderName = almLoginObject
                .getTestSetParentFolder();
        InitiateALM initiateALM = new InitiateALM();
        FindTestSet findTestSetObj = new FindTestSet();
        ALMOperationUtil almUtilObj = new ALMOperationUtil();
        TestSet testSetObject = new TestSet();
        ALMCookiesHeaders cookieHeaderObject = null;
        try {

            cookieHeaderObject = initiateALM.signInALM(userName, password,
                    host);
            String testSetId = findTestSetObj.findTestSetFolderParentId(host,
                    domain, project, cookieHeaderObject.getHeaders(),
                    cookieHeaderObject.getCookies(), testSetParentFolderName);
            Response responseTS = almUtilObj.hitCreateTestSetRequest(host,
                    domain, project, cookieHeaderObject, testSetId);

            Entity responseObject = (Entity) APIManager
                    .convertFromJson(responseTS.asString(), Entity.class);
            LOG.info(responseObject.getType());

            for (int i = 0; i < responseObject.getFields().size(); i++) {
                String name = responseObject.getFields().get(i).getName();
                if ("name".equals(name)) {
                    String value = responseObject.getFields().get(i).getValues()
                            .get(0).getValue();
                    testSetObject.setName(value);
                    LOG.info("Name of Test Set :- " + value);
                }
                if ("id".equals(name)) {
                    String value = responseObject.getFields().get(i).getValues()
                            .get(0).getValue();
                    testSetObject.setId(value);
                    LOG.info("Id of Test Set :- " + value);
                }
                if ("parent-id".equals(name)) {
                    String value = responseObject.getFields().get(i).getValues()
                            .get(0).getValue();
                    testSetObject.setParentId(value);
                    LOG.info("Parent id of Test Set :- " + value);
                }
            }

            initiateALM.signOutALM(host, cookieHeaderObject);
        } catch (Exception e) {
            initiateALM.signOutALM(host, cookieHeaderObject);
            LOG.error(e);
        } finally {
            initiateALM.signOutALM(host, cookieHeaderObject);
        }
        return testSetObject;
    }

    /**
     * Function to add the given test case <code> testCaseId </code> into given
     * test set <code> testSetId</code>.
     * 
     * @param almLoginObject
     *            {@link ALMLogin} ALMLogin object which contain ALM initialize
     *            information.
     * @param almCookiesHeaders
     *            {@link ALMCookiesHeaders} ALMCookiesHeaders Object which
     *            contains the Map of Cookies and Headers and generated by ALM
     *            Sign In.
     * @param testCaseId
     *            - test case id as String.
     * @param testSetId
     *            - test set id as string.
     * @return {@link TestInstance}
     * 
     * @author 
     */
    public TestInstance addTestCaseInTestSet(final ALMLogin almLoginObject,
            final ALMCookiesHeaders almCookiesHeaders, final String testCaseId,
            final String testSetId) {
        CreateTestInstance createTI = new CreateTestInstance();
        Map<Object, Object> testCaseInfoMap = new HashMap<>();
        TestInstance testInstanceObj = new TestInstance();
        try {
            String host = almLoginObject.getHost();
            // *********** find out the subTypeId *********************
            FindTestCase findTCObj = new FindTestCase();
            String testCaseSubTypeId = findTCObj.getTestCaseSubTypeIdValue(
                    almLoginObject, almCookiesHeaders, testCaseId);

            String url = host + REST_DOMAINS + almLoginObject.getDomain()
                    + PROJECTS + almLoginObject.getProject()
                    + "/test-instances";
            String testInstanceRequestString = createTI
                    .createTestInstanceRequest(testCaseId, testSetId,
                            almLoginObject.getUserName(), "No Run",
                            testCaseSubTypeId);
            Response responseTestInstance = ApiUtil.postRequest(url,
                    almCookiesHeaders.getHeaders(),
                    almCookiesHeaders.getCookies(), testInstanceRequestString);
            LOG.info(responseTestInstance.asString());
            Entity responseObject = (Entity) APIManager.convertFromJson(
                    responseTestInstance.asString(), Entity.class);
            LOG.info(responseObject.getType());

            for (int i = 0; i < responseObject.getFields().size(); i++) {
                String name = responseObject.getFields().get(i).getName();
                if ("name".equals(name)) {
                    String value = responseObject.getFields().get(i).getValues()
                            .get(0).getValue();
                    testCaseInfoMap.put("name", value);
                    testInstanceObj.setName(value);
                    LOG.info("Name of Test case :- " + value);
                }
                if ("id".equals(name)) {
                    String value = responseObject.getFields().get(i).getValues()
                            .get(0).getValue();
                    testInstanceObj.setId(value);
                    testCaseInfoMap.put("id", value);
                    LOG.info("Id of Test Instance :- " + value);
                }
                if (TEST_ID.equals(name)) {
                    String value = responseObject.getFields().get(i).getValues()
                            .get(0).getValue();
                    testInstanceObj.setTestCaseId(value);
                    testCaseInfoMap.put(TEST_ID, value);
                    LOG.info("Actual Test case Id :- " + value);
                }
                if ("cycle-id".equals(name)) {
                    String value = responseObject.getFields().get(i).getValues()
                            .get(0).getValue();
                    testInstanceObj.setTestSetId(value);
                    testCaseInfoMap.put("cycle-id", value);
                    LOG.info("Cycle Id (Test Set Id) :- " + value);
                }
            }

        } catch (Exception e) {
            LOG.error(e);
        }
        return testInstanceObj;
    }

    /**
     * Perform update Test instance in ALM with pass or fail status.
     * 
     * @param almLoginObject
     *            - {@link ALMLogin}
     * @param testCaseId
     *            - ALM test case id
     * @param testSetId
     *            - ALM test set id
     * @param testCycleId
     *            - ALM Test Instance Id
     * @param status
     *            - Test instance Status which need to be update.
     * @return {@link ALMRun} ALM run information if created new.
     * 
     * @author 
     */
    public ALMRun updateTestCaseInTestSet(final ALMLogin almLoginObject,
            final String testCaseId, final String testSetId,
            final String testCycleId, final String status) {
        UpdateTestInstance updateTI = new UpdateTestInstance();
        ALMRun runDataObj = new ALMRun();
        InitiateALM initiateALM = new InitiateALM();
        ALMCookiesHeaders almCookieHeaders = null;
        String userName = almLoginObject.getUserName();
        String password = almLoginObject.getPassword();
        String host = almLoginObject.getHost();
        String domain = almLoginObject.getDomain();
        String project = almLoginObject.getProject();
        String finalStatus = null;
        if ("Passed".equals(status)) {
            finalStatus = "Passed";
        } else if ("Failed".equals(status)) {
            finalStatus = "Failed";
        } else {
            finalStatus = "No Run";
        }
        try {
            almCookieHeaders = initiateALM.signInALM(userName, password, host);

            // *********** find out the subTypeId *********************
            FindTestCase findTCObj = new FindTestCase();
            String testCaseSubTypeId = findTCObj.getTestCaseSubTypeIdValue(
                    almLoginObject, almCookieHeaders, testCaseId);

            // ********** Get current Test Instance Status ****************
            String tiurl = host + REST_DOMAINS + domain + PROJECTS
                    + project + "/test-instances/" + testCycleId
                    + "?fields=status";
            Response responseTestInstanceStatus = ApiUtil.getRequest(tiurl,
                    almCookieHeaders.getHeaders(),
                    almCookieHeaders.getCookies());
            if (responseTestInstanceStatus
                    .getStatusCode() == HTTPSTATUSCODE_200) {
                LOG.info("Inside Test Instance Status 200 if condition");
                Entity responseStatusObject = (Entity) APIManager
                        .convertFromJson(responseTestInstanceStatus.asString(),
                                Entity.class);
                for (int i = 0; i < responseStatusObject.getFields()
                        .size(); i++) {
                    String name = responseStatusObject.getFields().get(i)
                            .getName();
                    if ("status".equals(name)) {
                        String value = responseStatusObject.getFields().get(i)
                                .getValues().get(0).getValue();
                        LOG.info("status of Test case instance:- " + value);
                        if (value.equals(finalStatus)) {
                            LOG.info("Status is same i.e. : - " + finalStatus);
                            // **************** create Test Run and link with
                            // test instance *************************
                            CreateTestRun createTestRunObject = new CreateTestRun();
                            String runRequestString = createTestRunObject
                                    .createTestRunRequest(testCaseId, testSetId,
                                            userName, testCycleId, finalStatus,
                                            testCaseSubTypeId);

                            String runurl = host + REST_DOMAINS + domain
                                    + PROJECTS + project + "/runs";
                            Response responseRunCreation = ApiUtil.postRequest(
                                    runurl, almCookieHeaders.getHeaders(),
                                    almCookieHeaders.getCookies(),
                                    runRequestString);

                            LOG.info(responseRunCreation.asString());
                            LOG.info(responseRunCreation.getStatusCode());
                            ALMOperationUtil run = new ALMOperationUtil();
                            runDataObj = run
                                    .getRunInformation(responseRunCreation);
                            LOG.info(runDataObj.getRunId() + " : : "
                                    + runDataObj.getRunName());
                        } else {
                            LOG.info("Status is not same. Current status is:- "
                                    + value + ". And new status is: - "
                                    + finalStatus);
                        }
                    }
                }
            }

            String url = host + REST_DOMAINS + domain + PROJECTS
                    + project + "/test-instances/" + testCycleId;
            String testInstanceRequestString = updateTI
                    .updateTestInstanceRequest(testCaseId, testSetId, userName,
                            finalStatus, testCaseSubTypeId);
            Response responseTestInstance = ApiUtil.putRequest(url,
                    almCookieHeaders.getHeaders(),
                    almCookieHeaders.getCookies(), testInstanceRequestString);
            LOG.info(responseTestInstance.asString());
            Entity responseObject = (Entity) APIManager.convertFromJson(
                    responseTestInstance.asString(), Entity.class);
            LOG.info(responseObject.getType());
            initiateALM.signOutALM(host, almCookieHeaders);

        } catch (Exception e) {
            initiateALM.signOutALM(host, almCookieHeaders);
            LOG.error(e);
        } finally {
            initiateALM.signOutALM(host, almCookieHeaders);
        }
        return runDataObj;
    }

    /**
     * Function to store Run information.
     * 
     * @param response
     *            - {@link Response}
     * @return {@link ALMRun}
     * 
     * @author 
     */
    public ALMRun getRunInformation(final Response response) {
        ALMRun runObj = new ALMRun();
        try {
            Entity responseObject = (Entity) APIManager
                    .convertFromJson(response.asString(), Entity.class);
            for (int i = 0; i < responseObject.getFields().size(); i++) {
                String name = responseObject.getFields().get(i).getName();
                if ("name".equals(name)) {
                    String value = responseObject.getFields().get(i).getValues()
                            .get(0).getValue();
                    runObj.setRunName(value);
                    LOG.info("Name of Run :- " + value);
                }
                if ("id".equals(name)) {
                    String value = responseObject.getFields().get(i).getValues()
                            .get(0).getValue();
                    runObj.setRunId(value);
                    LOG.info("Id of Run :- " + value);
                }
                if (TEST_ID.equals(name)) {
                    String value = responseObject.getFields().get(i).getValues()
                            .get(0).getValue();
                    runObj.setRunTestId(value);
                    LOG.info("Actual Test case Id :- " + value);
                }
                if ("testcycl-id".equals(name)) {
                    String value = responseObject.getFields().get(i).getValues()
                            .get(0).getValue();
                    runObj.setRunTestInstanceId(value);
                    LOG.info("Test Cycle Id (Test instance Id) :- " + value);
                }
            }
        } catch (Exception e) {
            LOG.error(e);
        }
        return runObj;
    }

    /**
     * Function to fetch defect id if linked to given test case
     * <code> testCaseId </code>.
     * 
     * @param almLoginObject
     *            - {@link ALMLogin} - It have alm login information like host,
     *            domain, project, username, password, etc
     * @param almCookieHeaderObj
     *            - {@link ALMCookiesHeaders} - It contain ALM session cookies
     *            and header information.
     * @param testCaseId
     *            - ALM test case for which fetching linked defect id.
     * @return defectId - If found then its defect id number else it will return
     *         0.
     */
    public String checkIsDefectExistsForTestCase(final ALMLogin almLoginObject,
            final ALMCookiesHeaders almCookieHeaderObj,
            final String testCaseId) {
        String defectId = "0";
        try {
            String url = almLoginObject.getHost() + REST_DOMAINS
                    + almLoginObject.getDomain() + PROJECTS
                    + almLoginObject.getProject() + "/defects";
            Response response = given()
                    .queryParam("query", "{test.id[=" + testCaseId + "]}")
                    .cookies(almCookieHeaderObj.getCookies())
                    .headers(almCookieHeaderObj.getHeaders()).get(url).then()
                    .extract().response();
            if (response.getStatusCode() == HTTPSTATUSCODE_200) {
                Entities responseObj = (Entities) APIManager
                        .convertFromJson(response.asString(), Entities.class);
                Integer totalResultCount = responseObj.getTotalResults();
                if (totalResultCount > 0) {
                    boolean idFound = false;
                    for (int i = 0; i < responseObj.getEntities().size(); i++) {
                        Entity entityObj = responseObj.getEntities().get(i);

                        for (int j = 0; j < entityObj.getFields().size(); j++) {
                            Field filedObj = entityObj.getFields().get(j);
                            String name = filedObj.getName();
                            if ("id".equals(name)) {
                                defectId = filedObj.getValues().get(0)
                                        .getValue();
                                LOG.info("Linked Defect id :- " + defectId
                                        + " for the test case:- " + testCaseId);
                                idFound = true;
                                break;
                            }
                        }
                        if (idFound) {
                            break;
                        }
                    }
                }
            }
        } catch (Exception e) {
            LOG.error(
                    "Exception while fetching defect information for a test case:- "
                            + e);
        }
        return defectId;
    }
}
